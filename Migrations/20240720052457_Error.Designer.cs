// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pdf1.Data;

#nullable disable

namespace pdf1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240720052457_Error")]
    partial class Error
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("pdf1.Models.Certificate", b =>
                {
                    b.Property<int>("CerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CerId"));

                    b.Property<string>("CertificateUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CerId");

                    b.HasIndex("Id");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("pdf1.Models.Education", b =>
                {
                    b.Property<int>("EduId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EduId"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndMonthYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("StartMonthYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EduId");

                    b.HasIndex("Id");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("pdf1.Models.Experience", b =>
                {
                    b.Property<int>("ExpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpId"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExpId");

                    b.HasIndex("Id");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("pdf1.Models.Project", b =>
                {
                    b.Property<int>("ProId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProId");

                    b.HasIndex("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("pdf1.Models.ResourceDetail", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceId"));

                    b.Property<string>("AboutMe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedInUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearOfExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResourceId");

                    b.ToTable("ResourceDetails");
                });

            modelBuilder.Entity("pdf1.Models.Resourceskill", b =>
                {
                    b.Property<int>("ResourceskillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceskillId"));

                    b.Property<int>("ResId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("ResourceskillId");

                    b.HasIndex("ResId");

                    b.HasIndex("SkillId");

                    b.ToTable("Resourcesofskill");
                });

            modelBuilder.Entity("pdf1.Models.Skill", b =>
                {
                    b.Property<int>("SId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SId"));

                    b.Property<int?>("ResourceDetailResourceId")
                        .HasColumnType("int");

                    b.Property<int>("SgId")
                        .HasColumnType("int");

                    b.Property<int>("SkillgroupId")
                        .HasColumnType("int");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SId");

                    b.HasIndex("ResourceDetailResourceId");

                    b.HasIndex("SkillgroupId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("pdf1.Models.Skillgroup", b =>
                {
                    b.Property<int>("SkillgroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillgroupId"));

                    b.Property<string>("Skill_group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillgroupId");

                    b.ToTable("Skillgroup");
                });

            modelBuilder.Entity("pdf1.Models.Certificate", b =>
                {
                    b.HasOne("pdf1.Models.ResourceDetail", "res")
                        .WithMany("cer")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("res");
                });

            modelBuilder.Entity("pdf1.Models.Education", b =>
                {
                    b.HasOne("pdf1.Models.ResourceDetail", "res")
                        .WithMany("edu")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("res");
                });

            modelBuilder.Entity("pdf1.Models.Experience", b =>
                {
                    b.HasOne("pdf1.Models.ResourceDetail", "res")
                        .WithMany("exp")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("res");
                });

            modelBuilder.Entity("pdf1.Models.Project", b =>
                {
                    b.HasOne("pdf1.Models.ResourceDetail", "res")
                        .WithMany("pro")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("res");
                });

            modelBuilder.Entity("pdf1.Models.Resourceskill", b =>
                {
                    b.HasOne("pdf1.Models.ResourceDetail", "res")
                        .WithMany("rski")
                        .HasForeignKey("ResId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("pdf1.Models.Skill", "sk")
                        .WithMany("rski")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("res");

                    b.Navigation("sk");
                });

            modelBuilder.Entity("pdf1.Models.Skill", b =>
                {
                    b.HasOne("pdf1.Models.ResourceDetail", null)
                        .WithMany("ski")
                        .HasForeignKey("ResourceDetailResourceId");

                    b.HasOne("pdf1.Models.Skillgroup", "skillgroup")
                        .WithMany("Sk")
                        .HasForeignKey("SkillgroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("skillgroup");
                });

            modelBuilder.Entity("pdf1.Models.ResourceDetail", b =>
                {
                    b.Navigation("cer");

                    b.Navigation("edu");

                    b.Navigation("exp");

                    b.Navigation("pro");

                    b.Navigation("rski");

                    b.Navigation("ski");
                });

            modelBuilder.Entity("pdf1.Models.Skill", b =>
                {
                    b.Navigation("rski");
                });

            modelBuilder.Entity("pdf1.Models.Skillgroup", b =>
                {
                    b.Navigation("Sk");
                });
#pragma warning restore 612, 618
        }
    }
}
